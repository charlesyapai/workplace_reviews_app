# Importing necessary libraries
from bertopic import BERTopic
from bertopic.representation import KeyBERTInspired
from hdbscan import HDBSCAN
from umap import UMAP


class TopicModelingPipeline:
    def __init__(self, nr_topics=20, n_neighbors=25, n_components=5):
        """
        Initializes the Topic Modeling Pipeline with the specified configuration for BERTopic, UMAP, and HDBSCAN models.

        Parameters:
        - nr_topics (int): The number of topics to generate (or None for dynamic topic count).
        - n_neighbors (int): The number of neighbors to consider for UMAP dimensionality reduction.
        - n_components (int): The number of components to use for UMAP dimensionality reduction.

        Initializes internal representation, dimensionality reduction, and clustering models with the specified parameters.
        """
        self.representation_model = KeyBERTInspired(
            nr_repr_docs=10
        )  # KeyBERT Representation Model
        self.umap_model = UMAP(
            n_neighbors=n_neighbors,
            n_components=n_components,
            metric="cosine",
            low_memory=False,
        )  # UMAP Model
        self.hdbscan_model = HDBSCAN(
            min_cluster_size=10, metric="euclidean", prediction_data=True
        )  # HDBScan Model

        self.topic_model = BERTopic(
            language="english",
            calculate_probabilities=True,  # BERTopic Model Initialization
            verbose=True,
            umap_model=self.umap_model,
            hdbscan_model=self.hdbscan_model,
            nr_topics=nr_topics,
            representation_model=self.representation_model,
        )

    def fit_model(self, df, column_name="comment"):  # Fitting the model
        """
        Fits the BERTopic model to the dataset and maps the resulting topics back to the dataframe.

        Parameters:
        - df (pd.DataFrame): The dataframe containing the text data to be modeled.
        - column_name (str): The name of the column in df that contains the text data.

        Returns:
        - df (pd.DataFrame): The original dataframe with an added 'topics' column representing the assigned topic for each document.
        - topics (List[int]): A list of topic IDs assigned to each document.
        - probs (List[float]): A list of probabilities associated with each topic assignment.
        """

        topics, probs = self.topic_model.fit_transform(df[column_name])
        df["topics"] = topics  # Map the topics to the dataframe
        return df

    def visualise_barchart(self):  # Visualise the barchart
        """
        Visualizes a barchart of the topic distribution.

        The barchart displays the number of documents associated with each topic. No parameters are required as it uses
        internal state from the fitted BERTopic model.
        """
        return self.topic_model.visualize_barchart(top_n_topics=20)

    def visualise_hierarchy(self):
        """
        Visualizes the hierarchical structure of the topics generated by the model.

        Parameters:
        - top_n_topics (int): The number of top topics to include in the visualization (default is 50).

        This method helps in understanding the relationship between different topics.
        """
        return self.topic_model.visualize_hierarchy(top_n_topics=50)

    def print_details(self, representative_docs=False, just_topic_counts=False):
        """
        Prints detailed information about the topics, including topic counts and optionally representative documents.

        Parameters:
        - representative_docs (bool): If True, includes the representative documents for each topic in the output.
        - just_topic_counts (bool): If True, only prints the count of documents for each topic.

        Depending on the parameters, this method can print a simple count of topics, or detailed information including
        representative documents.
        """
        if just_topic_counts == True:
            return self.topic_model.get_topic_info()[["Topic", "Count"]]
        elif representative_docs == False:
            return self.topic_model.get_topic_info()[
                ["Topic", "Count", "Representation"]
            ]
        else:
            return self.topic_model.get_topic_info()[
                ["Topic", "Count", "Representation", "Representative_Docs"]
            ]
